#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('real-time-call:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/* custom */

/**
 * Create Socket.
 */

var io = require('socket.io')(server);

/* connections[socke.id] = sessionid */
var connections = {};

/**
 * Socket events.
 */

io.on('connection', function(socket){
 //console.log(socket.id);
 //cập nhật người dùng online.
 //socket.emit('update-user-online', Object.keys(connections).length);

 /* save a sessionid  with socketid coresspond */
  socket.on('user-data', function(udata) {
   //console.log(udata._id);
    if(!currentUserIsOnline(udata._id)) connections[socket.id] = udata;

    console.log('Have ' + Object.keys(connections).length + ' connected');
   
    // cập nhật người dùng online
    socket.emit('update-user-online', UsersOnline());
      socket.broadcast.emit('update-user-online', UsersOnline());
    });

   //make a phone call.
    socket.on('make-a-call', function(data){
     //console.log(data.token);
     // process........
     socket.broadcast.emit('wating-a-call', {from: data.from, to: data.to, token: data.token});
    });

    //send token respond
    socket.on('send-token-respord', function(data) {
      socket.broadcast.emit('token-respord', {from: data.from, to: data.to, token: data.token});
    });

   socket.on('disconnect', function(){
     console.log('disconnected!');
     console.log(socket.id);
     //delete connects
     delete connections[socket.id];
   //console.log('Have ' + Object.keys(connections).length + ' connected()');
     socket.broadcast.emit('update-user-online', UsersOnline());
   })
});

/*
* cập nhật user online
*/

function getAllValuesOfHash(hash) {
  var value = [];
  for(var key in hash) {
    value.push(hash[key]);
  }
  return value;
}

var User = require('../models/user');

function UsersOnline() {
  return getAllValuesOfHash(connections);
}

/*
* check current user
*/

function currentUserIsOnline(sessionid) {
  if (Object.keys(connections).length == 0) return false;
  for(var key in connections) {
    if(connections[key]._id.localeCompare(sessionid) == 0) return true;
  }
  return false;
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
